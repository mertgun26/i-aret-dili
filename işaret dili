import cv2
import numpy as np
import os , sys
import argparse





from tkinter import *
 




max_value = 255
max_value_H = 360//2
low_H = 0
low_S = 0
low_V = 0
high_H = max_value_H
high_S = max_value
high_V = max_value
window_capture_name = 'Video Capture'
window_detection_name = 'Object Detection'
low_H_name = 'Low H'
low_S_name = 'Low S'
low_V_name = 'Low V'
high_H_name = 'High H'
high_S_name = 'High S'
high_V_name = 'High V'
def on_low_H_thresh_trackbar(val):
    global low_H
    global high_H
    low_H = val
    low_H = min(high_H-1, low_H)
    cv2.setTrackbarPos(low_H_name, window_detection_name, low_H)
def on_high_H_thresh_trackbar(val):
    global low_H
    global high_H
    high_H = val
    high_H = max(high_H, low_H+1)
    cv2.setTrackbarPos(high_H_name, window_detection_name, high_H)
def on_low_S_thresh_trackbar(val):
    global low_S
    global high_S
    low_S = val
    low_S = min(high_S-1, low_S)
    cv2.setTrackbarPos(low_S_name, window_detection_name, low_S)
def on_high_S_thresh_trackbar(val):
    global low_S
    global high_S
    high_S = val
    high_S = max(high_S, low_S+1)
    cv2.setTrackbarPos(high_S_name, window_detection_name, high_S)
def on_low_V_thresh_trackbar(val):
    global low_V
    global high_V
    low_V = val
    low_V = min(high_V-1, low_V)
    cv2.setTrackbarPos(low_V_name, window_detection_name, low_V)
def on_high_V_thresh_trackbar(val):
    global low_V
    global high_V
    high_V = val
    high_V = max(high_V, low_V+1)
    cv2.setTrackbarPos(high_V_name, window_detection_name, high_V)

parser = argparse.ArgumentParser(description='Code for Thresholding Operations using inRange tutorial.')
parser.add_argument('--camera', help='Camera divide number.', default=0, type=int)
args = parser.parse_args()
cap = cv2.VideoCapture(args.camera)
cv2.namedWindow(window_capture_name)
cv2.namedWindow(window_detection_name)
cv2.createTrackbar(low_H_name, window_detection_name , low_H, max_value_H, on_low_H_thresh_trackbar)
cv2.createTrackbar(high_H_name, window_detection_name , high_H, max_value_H, on_high_H_thresh_trackbar)
cv2.createTrackbar(low_S_name, window_detection_name , low_S, max_value, on_low_S_thresh_trackbar)
cv2.createTrackbar(high_S_name, window_detection_name , high_S, max_value, on_high_S_thresh_trackbar)
cv2.createTrackbar(low_V_name, window_detection_name , low_V, max_value, on_low_V_thresh_trackbar)
cv2.createTrackbar(high_V_name, window_detection_name , high_V, max_value, on_high_V_thresh_trackbar)
Kamera = cv2.VideoCapture(0)
kernel = np.ones((12, 12), np.uint8)

def resimfarkbul(resim1, resim2):
	resim2 = cv2.resize(resim2,(resim1.shape[1], resim1.shape[0]))
	fark_resim = cv2.absdiff(resim1, resim2)
	fark_sayı = cv2.countNonZero(fark_resim)
	return fark_sayı

def stopWatch():
        import datetime
        import time
        an = datetime.datetime.now()
        sn = an.second
        a = 0
        hours = 0
        while a < 1:
            for minutes in range(0, 60):
                for seconds in range(0, 60):
                    time.sleep(1)
                    return sn
                    time.sleep(1)
                    
        hours = hours + 1

 	

dizi = []*100


def ana():
	
	global dizi
	a = cv2.imread("desktop/harfler/a.jpg", 0)  
	b = cv2.imread("desktop/harfler/b.jpg", 0)
	c = cv2.imread("desktop/harfler/c.jpg", 0)
	d = cv2.imread("desktop/harfler/d.jpg", 0)
	e = cv2.imread("desktop/harfler/e.jpg", 0)
	f = cv2.imread("desktop/harfler/f.jpg", 0)
	g = cv2.imread("desktop/harfler/g.jpg", 0)
	h = cv2.imread("desktop/harfler/h.jpg", 0)
	i = cv2.imread("desktop/harfler/i.jpg", 0)
	j = cv2.imread("desktop/harfler/j.jpg", 0)
	k = cv2.imread("desktop/harfler/k.jpg", 0)
	l = cv2.imread("desktop/harfler/l.jpg", 0)
	m = cv2.imread("desktop/harfler/m.jpg", 0)
	n = cv2.imread("desktop/harfler/n.jpg", 0)
	o = cv2.imread("desktop/harfler/o.jpg", 0)
	p = cv2.imread("desktop/harfler/p.jpg", 0)
	q = cv2.imread("desktop/harfler/q.jpg", 0)
	r = cv2.imread("desktop/harfler/r.jpg", 0)
	s = cv2.imread("desktop/harfler/s.jpg", 0)
	t = cv2.imread("desktop/harfler/t.jpg", 0)
	u = cv2.imread("desktop/harfler/u.jpg", 0)
	v = cv2.imread("desktop/harfler/v.jpg", 0)
	y = cv2.imread("desktop/harfler/y.jpg", 0)
	z = cv2.imread("desktop/harfler/z.jpg", 0)
	w = cv2.imread("desktop/harfler/w.jpg", 0)

	
	while True:	    
		
		ret, frame = cap.read()
    
		frame_HSV = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
		frame_threshold = cv2.inRange(frame_HSV, (low_H, low_S, low_V), (high_H, high_S, high_V))
		Kesilmis_Kare = frame_threshold[0:250, 0:250]
		resim2 = Kesilmis_Kare
		cv2.putText(frame,"Kapatmak icin Q harfine basin ",(1,420),cv2.FONT_HERSHEY_DUPLEX,1,(255,255,255,255),2,cv2.LINE_4);
		
		yazılacak = 0
		
		if(resimfarkbul(a,resim2)<4000):
			yazılacak = "a"			
		if(resimfarkbul(b,resim2)<4000):
			yazılacak = "b"
		if(resimfarkbul(c,resim2)<4000):
			yazılacak = "c"
		if(resimfarkbul(d,resim2)<4000):
			yazılacak = "d"
		if(resimfarkbul(e,resim2)<4000):
			yazılacak = "e"
		if(resimfarkbul(f,resim2)<4000):
			yazılacak = "f"
		if(resimfarkbul(g,resim2)<4000):
			yazılacak = "g"
		if(resimfarkbul(h,resim2)<4000):
			yazılacak = "h"
		if(resimfarkbul(i,resim2)<4000):
			yazılacak = "i"
		if(resimfarkbul(j,resim2)<4000):
			yazılacak = "j"
		if(resimfarkbul(k,resim2)<4000):
			yazılacak = "k"
		if(resimfarkbul(l,resim2)<4000):
			yazılacak = "l"
		if(resimfarkbul(m,resim2)<4000):
			yazılacak = "m"
		if(resimfarkbul(n,resim2)<4000):
			yazılacak = "n"
		if(resimfarkbul(o,resim2)<4000):
			yazılacak = "o"
		if(resimfarkbul(p,resim2)<4000):
			yazılacak = "p"
		if(resimfarkbul(q,resim2)<4000):
			yazılacak = "q"
		if(resimfarkbul(r,resim2)<4000):
			yazılacak = "r"
		if(resimfarkbul(s,resim2)<4000):
			yazılacak = "s"
		if(resimfarkbul(t,resim2)<4000):
			yazılacak = "t"
		if(resimfarkbul(u,resim2)<4000):
			yazılacak = "u"
		if(resimfarkbul(v,resim2)<4000):
			yazılacak = "v"
		if(resimfarkbul(w,resim2)<4000):
			yazılacak = "w"
		if(resimfarkbul(y,resim2)<4000):
			yazılacak = "y"
		if(resimfarkbul(z,resim2)<4000):
			yazılacak = "z"
		"""
		if(yazılacak != 0 and stopWatch() % 2 == 0):
			print(yazılacak)
			dizi = np.append(dizi,yazılacak)


    

		cv2.imshow(window_capture_name, frame)
		cv2.imshow(window_detection_name, frame_threshold)
		cv2.imshow("Kesilmis_Kare", Kesilmis_Kare)

		if cv2.waitKey(1) & 0xFF == ord('q'):
			break			
			Kamera.relase()
			cv2.destroyAllWindows()   
		  
	



def kaydet():
	
	while True:
		
		ret, frame = cap.read()
		
		frame_HSV = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
		frame_threshold = cv2.inRange(frame_HSV, (low_H, low_S, low_V), (high_H, high_S, high_V))
		Kesilmis_Kare = frame_threshold[0:250, 0:250]
		cv2.putText(frame,"Kaydetmek icin K harfine basin ",(1,420),cv2.FONT_HERSHEY_DUPLEX,1,(255,255,255,255),2,cv2.LINE_4);	    
		

		cv2.imshow(window_capture_name, frame)
		cv2.imshow(window_detection_name, frame_threshold)
		cv2.imshow("Kesilmis_Kare", Kesilmis_Kare)
		if cv2.waitKey(1) & 0xFF == ord('k'):
			harf = input("kaydetmek istedin harf: ")
			cv2.imwrite("C:/Users/ASUS/Desktop/harfler/"+harf+".jpg",Kesilmis_Kare)
			break
			Kamera.relase()
			cv2.destroyAllWindows()
				
	

	
harfoku = "a"	 
def oku():
	
	pencere = Tk()

	global harfoku
	harfoku=Entry(pencere)
	harfoku.pack()
	
	buton1 = Button(pencere)
	buton1.config(text="bul", bg="yellow", fg="black",command=bul)
	buton1.pack()
    
	
def bul():	
	a = cv2.imread("desktop/harfler/a.jpg", 0)  
	b = cv2.imread("desktop/harfler/b.jpg", 0)
	c = cv2.imread("desktop/harfler/c.jpg", 0)
	d = cv2.imread("desktop/harfler/d.jpg", 0)
	e = cv2.imread("desktop/harfler/e.jpg", 0)
	f = cv2.imread("desktop/harfler/f.jpg", 0)
	g = cv2.imread("desktop/harfler/g.jpg", 0)
	h = cv2.imread("desktop/harfler/h.jpg", 0)
	i = cv2.imread("desktop/harfler/i.jpg", 0)
	j = cv2.imread("desktop/harfler/j.jpg", 0)
	k = cv2.imread("desktop/harfler/k.jpg", 0)
	l = cv2.imread("desktop/harfler/l.jpg", 0)
	m = cv2.imread("desktop/harfler/m.jpg", 0)
	n = cv2.imread("desktop/harfler/n.jpg", 0)
	o = cv2.imread("desktop/harfler/o.jpg", 0)
	p = cv2.imread("desktop/harfler/p.jpg", 0)
	q = cv2.imread("desktop/harfler/q.jpg", 0)
	r = cv2.imread("desktop/harfler/r.jpg", 0)
	s = cv2.imread("desktop/harfler/s.jpg", 0)
	t = cv2.imread("desktop/harfler/t.jpg", 0)
	u = cv2.imread("desktop/harfler/u.jpg", 0)
	v = cv2.imread("desktop/harfler/v.jpg", 0)
	y = cv2.imread("desktop/harfler/y.jpg", 0)
	z = cv2.imread("desktop/harfler/z.jpg", 0)
	w = cv2.imread("desktop/harfler/w.jpg", 0)
	
	global harfoku
	if harfoku.get() == "a":
		cv2.imshow("A harfi",a)
	if harfoku.get() == "b":
		cv2.imshow("b harfi",b)
	if harfoku.get() == "c":
		cv2.imshow("c harfi",c)
	if harfoku.get() == "d":
		cv2.imshow("d harfi",d)
	if harfoku.get() == "e":
		cv2.imshow("e harfi",e)
	if harfoku.get() == "f":
		cv2.imshow("f harfi",f)
	if harfoku.get() == "g":
		cv2.imshow("g harfi",g)
	if harfoku.get() == "h":
		cv2.imshow("h harfi",h)
	if harfoku.get() == "i":
		cv2.imshow("i harfi",i)
	if harfoku.get() == "j":
		cv2.imshow("j harfi",j)
	if harfoku.get() == "j":
		cv2.imshow("j harfi",j)
	if harfoku.get() == "k":
		cv2.imshow("k harfi",k)
	if harfoku.get() == "l":
		cv2.imshow("l harfi",l)
	if harfoku.get() == "m":
		cv2.imshow("m harfi",m)
	if harfoku.get() == "n":
		cv2.imshow("n harfi",n)
	if harfoku.get() == "o":
		cv2.imshow("o harfi",o)
	if harfoku.get() == "p":
		cv2.imshow("p harfi",p)
	if harfoku.get() == "q":
		cv2.imshow("q harfi",q)
	if harfoku.get() == "r":
		cv2.imshow("r harfi",r)
	if harfoku.get() == "s":
		cv2.imshow("s harfi",s)
	if harfoku.get() == "t":
		cv2.imshow("t harfi",t)
	if harfoku.get() == "u":
		cv2.imshow("u harfi",u)
	if harfoku.get() == "v":
		cv2.imshow("v harfi",v)
	if harfoku.get() == "y":
		cv2.imshow("y harfi",y)
	if harfoku.get() == "z":
		cv2.imshow("z harfi",z)
	if harfoku.get() == "w":
		cv2.imshow("w harfi",w)	
		
	
    
   
    
def goster():
	global dizi
	print(dizi)
	
pencere = Tk()
pencere.geometry("250x250+10+10");


buton1 = Button(pencere)
buton1.config(text="İşaret Dili ---> Yazı", bg="yellow", fg="black",command=ana)
buton1.pack()

buton2 = Button(pencere)
buton2.config(text="Harf Kaydet", bg="yellow", fg="black",command=kaydet)
buton2.pack()

buton3 = Button(pencere)
buton3.config(text="İşaret Dilinden Okuduğunu Göster", bg="yellow", fg="black",command=goster)
buton3.pack()

buton4 = Button(pencere)
buton4.config(text="Harf ---> İşaret dili", bg="yellow", fg="black",command=oku)
buton4.pack()


mainloop()
